!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Agent	htlog_uap.hpp	/^struct Agent : Generic {$/;"	s
AgentStore	htlog_uap.hpp	/^struct AgentStore : GenericStore {$/;"	s
DB	GeoLite2PP.cpp	/^GeoLite2PP::DB::DB( const std::string &database_filename )$/;"	f	class:GeoLite2PP::DB
Device	htlog_uap.hpp	/^struct Device : Generic {$/;"	s
DeviceStore	htlog_uap.hpp	/^struct DeviceStore : GenericStore {$/;"	s
ERROR_MAX	ht_nodes.h	4;"	d
ErrorCategory	GeoLite2PP_error_category.hpp	/^	class ErrorCategory : public std::error_category$/;"	c	class:GeoLite2PP::MMDBStatus
GEOLITE2PP_VERSION	GeoLite2PP_version.hpp	16;"	d
Generic	htlog_uap.hpp	/^struct Generic {$/;"	s
GenericStore	htlog_uap.hpp	/^struct GenericStore {$/;"	s
GeoLite2PP	GeoLite2PP.hpp	/^namespace GeoLite2PP$/;"	n
GeoLite2PP	GeoLite2PP_error_category.hpp	/^namespace GeoLite2PP$/;"	n
HT_ALLOC_SIZE_DEFAULT	ht_nodes.h	6;"	d
HT_ALLOC_SIZE_MAX	ht_nodes.h	5;"	d
HourlyHitsContainer	htlog_containers.cpp	/^HourlyHitsContainer::HourlyHitsContainer( int did, time_t ts_full ){$/;"	f	class:HourlyHitsContainer
HourlyHitsContainer	htlog_containers.cpp	/^HourlyHitsContainer::HourlyHitsContainer(){$/;"	f	class:HourlyHitsContainer
HourlyHitsContainer	htlog_containers.hpp	/^class HourlyHitsContainer {$/;"	c
HourlyPageviewsContainer	htlog_containers.cpp	/^HourlyPageviewsContainer::HourlyPageviewsContainer() : HourlyVisitsContainer() {$/;"	f	class:HourlyPageviewsContainer
HourlyPageviewsContainer	htlog_containers.cpp	/^HourlyPageviewsContainer::HourlyPageviewsContainer(int did, time_t ts_full, unsigned long ip, std::string full_path) : HourlyVisitsContainer( did, ts_full, ip ) {$/;"	f	class:HourlyPageviewsContainer
HourlyPageviewsContainer	htlog_containers.hpp	/^class HourlyPageviewsContainer : public HourlyVisitsContainer {$/;"	c
HourlyVisitsContainer	htlog_containers.cpp	/^HourlyVisitsContainer::HourlyVisitsContainer() : HourlyHitsContainer() {$/;"	f	class:HourlyVisitsContainer
HourlyVisitsContainer	htlog_containers.cpp	/^HourlyVisitsContainer::HourlyVisitsContainer(int did, time_t ts_full, unsigned long ip) : HourlyHitsContainer( did, ts_full ) {$/;"	f	class:HourlyVisitsContainer
HourlyVisitsContainer	htlog_containers.hpp	/^class HourlyVisitsContainer : public HourlyHitsContainer {$/;"	c
HttpAccessLogMetrics	htlog_processing.cpp	/^HttpAccessLogMetrics::HttpAccessLogMetrics( std::vector<std::string> user_hosts, std::vector<std::string> search_hosts, std::string file ) : internal_hostnames(user_hosts), search_hostnames(search_hosts), lm(user_hosts[0],MYSQL_HOSTNAME,MYSQL_PORT,MYSQL_USER,MYSQL_PASSWORD) {$/;"	f	class:HttpAccessLogMetrics
HttpAccessLogMetrics	htlog_processing.hpp	/^class HttpAccessLogMetrics {$/;"	c
KeyValueContainer	htlog_containers.cpp	/^KeyValueContainer::KeyValueContainer( ) {$/;"	f	class:KeyValueContainer
KeyValueContainer	htlog_containers.cpp	/^KeyValueContainer::KeyValueContainer( std::string k, std::string v) {$/;"	f	class:KeyValueContainer
KeyValueContainer	htlog_containers.hpp	/^class KeyValueContainer{$/;"	c
LOG_SQL_STMTS	htlog_mysql.hpp	12;"	d
LogsMysql	htlog_mysql.cpp	/^LogsMysql::LogsMysql(std::string domain, std::string mysql_host, int mysql_port, std::string mysql_user, std::string mysql_password) : host(mysql_host), port(mysql_port), username(mysql_user), password(mysql_password), mysql_url("tcp:\/\/"+host+":"+std::to_string(port)), domain_name(domain) {$/;"	f	class:LogsMysql
LogsMysql	htlog_mysql.hpp	/^class LogsMysql {$/;"	c
MMDBStatus	GeoLite2PP_error_category.hpp	/^	enum class MMDBStatus$/;"	c	namespace:GeoLite2PP
MStr	GeoLite2PP.hpp	/^  typedef std::map<std::string, std::string> MStr;$/;"	t	namespace:GeoLite2PP
MYSQL_HOSTNAME	htlog_processing.hpp	19;"	d
MYSQL_PASSWORD	htlog_processing.hpp	22;"	d
MYSQL_PORT	htlog_processing.hpp	20;"	d
MYSQL_USER	htlog_processing.hpp	21;"	d
ParamsContainer	htlog_containers.cpp	/^ParamsContainer::ParamsContainer( ) : KeyValueContainer(){$/;"	f	class:ParamsContainer
ParamsContainer	htlog_containers.cpp	/^ParamsContainer::ParamsContainer( int pageType, std::string host, std::string pagePath, std::string pagePathFull, std::string k, std::string v) : KeyValueContainer(k,v){$/;"	f	class:ParamsContainer
ParamsContainer	htlog_containers.hpp	/^class ParamsContainer : public KeyValueContainer {$/;"	c
RegexContainer	htlog_uap.hpp	/^struct RegexContainer {$/;"	s
TVectorContainer	htlog_containers.cpp	/^TVectorContainer::TVectorContainer(){$/;"	f	class:TVectorContainer
TVectorContainer	htlog_containers.cpp	/^TVectorContainer::TVectorContainer(bool inner_vector, std::string external_hostname, std::string full_path_a, std::string full_path_b ){$/;"	f	class:TVectorContainer
TVectorContainer	htlog_containers.hpp	/^class TVectorContainer {$/;"	c
UAStore	htlog_uap.cpp	/^UAStore::UAStore( std::string regexes_file_path ){$/;"	f	class:UAStore
UAStore	htlog_uap.hpp	/^class UAStore {$/;"	c
UserAgent	htlog_uap.hpp	/^struct UserAgent {$/;"	s
UserAgentParser	htlog_uap.cpp	/^UserAgentParser::UserAgentParser(std::string regexes_file_path) : regexes_file_path_(regexes_file_path) {$/;"	f	class:UserAgentParser
UserAgentParser	htlog_uap.hpp	/^class UserAgentParser {$/;"	c
VCStr	GeoLite2PP.hpp	/^  typedef std::vector<const char *> VCStr;$/;"	t	namespace:GeoLite2PP
__HTLOG_CONTAINERS__	htlog_containers.hpp	104;"	d
__HTLOG_MYSQL__	htlog_mysql.hpp	49;"	d
__HTLOG_UAP__	htlog_uap.hpp	88;"	d
__HT_NODE__	ht_nodes.h	19;"	d
add_to_map	GeoLite2PP.cpp	/^void GeoLite2PP::DB::add_to_map( GeoLite2PP::MStr &m, MMDB_lookup_result_s *node, const std::string &name, const std::string &language, const VCStr &v )$/;"	f	class:GeoLite2PP::DB
agent	htlog_processing.hpp	/^  std::string  agent;$/;"	m	struct:logline
brand	htlog_uap.hpp	/^  std::string brand;$/;"	m	struct:Device
brandReplacement	htlog_uap.hpp	/^  std::string brandReplacement;$/;"	m	struct:DeviceStore
brandReplacementMap	htlog_uap.hpp	/^  std::map<std::string::size_type, size_t> brandReplacementMap;$/;"	m	struct:DeviceStore
browser	htlog_uap.hpp	/^  Agent browser;$/;"	m	struct:UserAgent
browserStore	htlog_uap.hpp	/^  std::vector<AgentStore> browserStore;$/;"	m	class:UAStore
client_browsers	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> client_browsers;$/;"	m	class:HttpAccessLogMetrics
client_browsers_ids	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> client_browsers_ids;    \/\/ browser_id$/;"	m	class:HttpAccessLogMetrics
client_devices	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> client_devices;$/;"	m	class:HttpAccessLogMetrics
client_devices_ids	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> client_devices_ids;     \/\/ with client_devices vers device_id $/;"	m	class:HttpAccessLogMetrics
client_geo_locations	htlog_processing.hpp	/^    std::map<std::string,int> client_geo_locations;$/;"	m	class:HttpAccessLogMetrics
client_geo_locations_ids	htlog_processing.hpp	/^    std::map<std::string,int> client_geo_locations_ids;     \/\/ country_id$/;"	m	class:HttpAccessLogMetrics
client_ip	htlog_containers.hpp	/^    unsigned long client_ip;$/;"	m	class:HourlyVisitsContainer
client_ips	htlog_processing.hpp	/^    std::map<unsigned long, int> client_ips;$/;"	m	class:HttpAccessLogMetrics
client_ips_ids	htlog_processing.hpp	/^    std::map<unsigned long, int> client_ips_ids;            \/\/ ip_id$/;"	m	class:HttpAccessLogMetrics
client_oses	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> client_oses;$/;"	m	class:HttpAccessLogMetrics
client_oses_ids	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> client_oses_ids;        \/\/ os_id$/;"	m	class:HttpAccessLogMetrics
con	htlog_mysql.hpp	/^  sql::Connection *con;$/;"	m	struct:st_worker_thread_param
corrupt_search_tree	GeoLite2PP_error_category.hpp	/^		corrupt_search_tree			= MMDB_CORRUPT_SEARCH_TREE_ERROR			,	\/\/\/<= 2$/;"	m	class:GeoLite2PP::MMDBStatus
create_json_from_entry	GeoLite2PP.cpp	/^void GeoLite2PP::DB::create_json_from_entry( std::stringstream &ss, size_t depth, uint32_t data_size, MMDB_entry_data_list_s * &node, const bool in_array )$/;"	f	class:GeoLite2PP::DB
cv	htlog_processing.cpp	/^std::condition_variable cv;$/;"	v
cv_m	htlog_processing.cpp	/^std::mutex cv_m;$/;"	v
date	htlog_processing.hpp	/^  std::string  date;$/;"	m	struct:logline
device	htlog_uap.hpp	/^  Device device;$/;"	m	struct:UserAgent
deviceStore	htlog_uap.hpp	/^  std::vector<DeviceStore> deviceStore;$/;"	m	class:UAStore
dirname	htlog_analyzer.cpp	/^std::string dirname;$/;"	v
domain_id	htlog_containers.hpp	/^    int domain_id;$/;"	m	class:HourlyHitsContainer
domain_name	htlog_mysql.hpp	/^    std::string domain_name;$/;"	m	class:LogsMysql
driver	htlog_mysql.hpp	/^    sql::Driver * driver;$/;"	m	class:LogsMysql
driver	htlog_mysql.hpp	/^  sql::Driver *driver;$/;"	m	struct:st_worker_thread_param
endThread	htlog_mysql.cpp	/^void LogsMysql::endThread(){$/;"	f	class:LogsMysql
error	htlog_processing.hpp	/^    std::string* error;$/;"	m	class:HttpAccessLogMetrics
et	htlog_processing.hpp	/^    int et; \/\/ end timestamp$/;"	m	class:HttpAccessLogMetrics
family	htlog_uap.hpp	/^  std::string family;$/;"	m	struct:Generic
file_open	GeoLite2PP_error_category.hpp	/^		file_open					= MMDB_FILE_OPEN_ERROR						,	\/\/\/<= 1$/;"	m	class:GeoLite2PP::MMDBStatus
filename	htlog_processing.hpp	/^    std::string filename;$/;"	m	class:HttpAccessLogMetrics
filenames	htlog_analyzer.cpp	/^std::vector<std::string> filenames;$/;"	v
fill_agent	htlog_uap.cpp	/^template <class AGENT, class AGENT_STORE> void fill_agent( AGENT& agent, const AGENT_STORE& store, const boost::smatch& m, const bool os ) {$/;"	f
fill_agent_store	htlog_uap.cpp	/^AgentStore fill_agent_store( const YAML::Node node, const std::string repl, const std::string major_repl, const std::string minor_repl, const std::string patch_repl) {$/;"	f
fill_device_store	htlog_uap.cpp	/^DeviceStore fill_device_store(const YAML::Node& device_parser) {$/;"	f
final	GeoLite2PP.hpp	/^  class DB final$/;"	c	namespace:GeoLite2PP
full_path	htlog_processing.hpp	/^  std::string full_path;$/;"	m	struct:url_parts
getClientIps	htlog_processing.cpp	/^std::map<unsigned long,int> HttpAccessLogMetrics::getClientIps(){$/;"	f	class:HttpAccessLogMetrics
getCountryFromIP	htlog_processing.cpp	/^std::string HttpAccessLogMetrics::getCountryFromIP( std::string client_ip){$/;"	f	class:HttpAccessLogMetrics
getDomainId	htlog_containers.cpp	/^int HourlyHitsContainer::getDomainId() const{$/;"	f	class:HourlyHitsContainer
getDomainsId	htlog_mysql.cpp	/^int LogsMysql::getDomainsId(  std::string domain_name ){$/;"	f	class:LogsMysql
getExternalDomain	htlog_containers.cpp	/^std::string TVectorContainer::getExternalDomain() const {$/;"	f	class:TVectorContainer
getFilesize	htlog_processing.cpp	/^size_t getFilesize(const std::string filename) {$/;"	f
getFullPagePath	htlog_containers.cpp	/^std::string ParamsContainer::getFullPagePath() const{$/;"	f	class:ParamsContainer
getHost	htlog_containers.cpp	/^std::string ParamsContainer::getHost() const{$/;"	f	class:ParamsContainer
getHostnameFromLogfile	htlog_processing.cpp	/^std::string getHostnameFromLogfile( std::string filename ){$/;"	f
getHourlyTs	htlog_containers.cpp	/^time_t HourlyHitsContainer::getHourlyTs() const{$/;"	f	class:HourlyHitsContainer
getIp	htlog_containers.cpp	/^unsigned long HourlyVisitsContainer::getIp() const{$/;"	f	class:HourlyVisitsContainer
getKey	htlog_containers.cpp	/^std::string KeyValueContainer::getKey() const{$/;"	f	class:KeyValueContainer
getLinesNumber	htlog_processing.cpp	/^int HttpAccessLogMetrics::getLinesNumber(){$/;"	f	class:HttpAccessLogMetrics
getLogfileNamesFromDirectory	htlog_processing.cpp	/^std::vector<std::string> getLogfileNamesFromDirectory( std::string directory ){$/;"	f
getNthNode	htlog_mysql.cpp	/^template<typename T> T getNthNode( std::map<T,int> pcs, int n ) {$/;"	f
getNumericIp	htlog_processing.cpp	/^unsigned long HttpAccessLogMetrics::getNumericIp( std::string addr ){$/;"	f	class:HttpAccessLogMetrics
getPage	htlog_containers.cpp	/^std::string ParamsContainer::getPage() const{$/;"	f	class:ParamsContainer
getPagePath	htlog_containers.cpp	/^std::string HourlyPageviewsContainer::getPagePath() const{$/;"	f	class:HourlyPageviewsContainer
getPagePathA	htlog_containers.cpp	/^std::string TVectorContainer::getPagePathA() const {$/;"	f	class:TVectorContainer
getPagePathB	htlog_containers.cpp	/^std::string TVectorContainer::getPagePathB() const{$/;"	f	class:TVectorContainer
getPageType	htlog_containers.cpp	/^int ParamsContainer::getPageType() const{$/;"	f	class:ParamsContainer
getStringIP	htlog_processing.cpp	/^std::string HttpAccessLogMetrics::getStringIP( unsigned long ip ){$/;"	f	class:HttpAccessLogMetrics
getTimestamp	htlog_processing.cpp	/^time_t HttpAccessLogMetrics::getTimestamp( std::string dateTime ){$/;"	f	class:HttpAccessLogMetrics
getTsHour	htlog_containers.cpp	/^std::string HourlyHitsContainer::getTsHour( ){$/;"	f	class:HourlyHitsContainer
getTsMysql	htlog_containers.cpp	/^std::string HourlyHitsContainer::getTsMysql( ){$/;"	f	class:HourlyHitsContainer
getUrlParts	htlog_processing.cpp	/^url_parts HttpAccessLogMetrics::getUrlParts( std::string url_string ){$/;"	f	class:HttpAccessLogMetrics
getUrlPartsFromReqPath	htlog_processing.cpp	/^url_parts HttpAccessLogMetrics::getUrlPartsFromReqPath( std::string requestPath, std::string proto, std::string hostname ){$/;"	f	class:HttpAccessLogMetrics
getUserId	htlog_mysql.cpp	/^int LogsMysql::getUserId( int real_did ){$/;"	f	class:LogsMysql
getValue	htlog_containers.cpp	/^std::string KeyValueContainer::getValue() const {$/;"	f	class:KeyValueContainer
get_all_fields	GeoLite2PP.cpp	/^GeoLite2PP::MStr GeoLite2PP::DB::get_all_fields( const std::string &ip_address, const std::string &language )$/;"	f	class:GeoLite2PP::DB
get_field	GeoLite2PP.cpp	/^std::string GeoLite2PP::DB::get_field( MMDB_lookup_result_s *lookup, const std::string &language, const VCStr &v )$/;"	f	class:GeoLite2PP::DB
get_field	GeoLite2PP.cpp	/^std::string GeoLite2PP::DB::get_field( const std::string &ip_address, const std::string &language, const VCStr &v )$/;"	f	class:GeoLite2PP::DB
get_lib_version_geolite2pp	GeoLite2PP.cpp	/^std::string GeoLite2PP::DB::get_lib_version_geolite2pp( void ) const$/;"	f	class:GeoLite2PP::DB
get_lib_version_mmdb	GeoLite2PP.cpp	/^std::string GeoLite2PP::DB::get_lib_version_mmdb( void ) const$/;"	f	class:GeoLite2PP::DB
get_metadata	GeoLite2PP.cpp	/^std::string GeoLite2PP::DB::get_metadata( void )$/;"	f	class:GeoLite2PP::DB
get_metadata_raw	GeoLite2PP.cpp	/^MMDB_metadata_s GeoLite2PP::DB::get_metadata_raw( void )$/;"	f	class:GeoLite2PP::DB
handler	htlog_mysql.hpp	/^    struct st_worker_thread_param * handler;$/;"	m	class:LogsMysql	typeref:struct:LogsMysql::st_worker_thread_param
hits	htlog_processing.hpp	/^    std::map<HourlyHitsContainer,int> hits;$/;"	m	class:HttpAccessLogMetrics
host	htlog_mysql.hpp	/^    std::string host;$/;"	m	class:LogsMysql
hostname	htlog_containers.hpp	/^    std::string hostname;$/;"	m	class:ParamsContainer
hostname	htlog_processing.hpp	/^  std::string  hostname;$/;"	m	struct:logline
hostname	htlog_processing.hpp	/^  std::string hostname;$/;"	m	struct:url_parts
hour_ts	htlog_containers.hpp	/^    time_t hour_ts;$/;"	m	class:HourlyHitsContainer
incrementCount	htlog_processing.cpp	/^template<typename T> void HttpAccessLogMetrics::incrementCount( std::map<T,int> *kvmap, T key ){$/;"	f	class:HttpAccessLogMetrics
initThread	htlog_mysql.cpp	/^void LogsMysql::initThread(){$/;"	f	class:LogsMysql
insertClientIps	htlog_mysql.cpp	/^void LogsMysql::insertClientIps(std::map<unsigned long,int> &client_ips_ids, std::map<unsigned long, int> client_ips) {$/;"	f	class:LogsMysql
insertEntities	htlog_processing.cpp	/^void HttpAccessLogMetrics::insertEntities(){$/;"	f	class:HttpAccessLogMetrics
insertExternalDomains	htlog_mysql.cpp	/^void LogsMysql::insertExternalDomains(std::map<std::string,int> &referer_hostnames_ids, std::map<std::string, int> referer_hostnames) {$/;"	f	class:LogsMysql
insertHitsPerHour	htlog_mysql.cpp	/^void LogsMysql::insertHitsPerHour(std::map<HourlyHitsContainer,int> hits, int real_did){$/;"	f	class:LogsMysql
insertNameVersionEntities	htlog_mysql.cpp	/^void LogsMysql::insertNameVersionEntities(std::string database, std::string table, std::map<KeyValueContainer,int> &entity_ids_map, std::map<KeyValueContainer, int> entities) {$/;"	f	class:LogsMysql
insertPageviewsPerHour	htlog_mysql.cpp	/^void LogsMysql::insertPageviewsPerHour( std::map<HourlyPageviewsContainer,int> pageviews, int real_did, std::map<unsigned long, int> client_ips_ids, std::map<std::string,int> page_paths_full_ids ){$/;"	f	class:LogsMysql
insertParamsEntities	htlog_mysql.cpp	/^void LogsMysql::insertParamsEntities(std::map<ParamsContainer,int> &entity_ids_map, std::map<ParamsContainer,int> entities, std::map<std::string,int> page_paths_ids, std::map<std::string,int> page_paths_full_ids) {$/;"	f	class:LogsMysql
insertSearchTerms	htlog_mysql.cpp	/^void LogsMysql::insertSearchTerms(std::map<KeyValueContainer,int> &entity_ids_map, std::map<KeyValueContainer, int> entities, std::map<std::string,int> referer_hostnames_ids) {$/;"	f	class:LogsMysql
insertStringEntities	htlog_mysql.cpp	/^void LogsMysql::insertStringEntities(std::string database, std::string table, std::map<std::string,int> &entity_ids_map, std::map<std::string, int> entities ) {$/;"	f	class:LogsMysql
insertTrafficVectors	htlog_mysql.cpp	/^void LogsMysql::insertTrafficVectors(bool inner, std::map<TVectorContainer,int> &tvectors_ids, std::map<TVectorContainer,int> tvectors, std::map<std::string,int> referer_hostnames_ids, std::map<std::string,int> page_paths_full_ids){$/;"	f	class:LogsMysql
insertVisitsPerHour	htlog_mysql.cpp	/^void LogsMysql::insertVisitsPerHour( std::map<HourlyVisitsContainer,int> visits, int real_did, std::map<unsigned long, int> client_ips_ids ){$/;"	f	class:LogsMysql
internal_domains	htlog_processing.hpp	/^    std::map<std::string,int> internal_domains;             \/\/ domain_id ( imported, not inserted )$/;"	m	class:HttpAccessLogMetrics
internal_hostnames	htlog_processing.hpp	/^    std::vector<std::string> internal_hostnames;$/;"	m	class:HttpAccessLogMetrics
internal_params	htlog_processing.hpp	/^    std::map<ParamsContainer,int> internal_params;$/;"	m	class:HttpAccessLogMetrics
internal_params_ids	htlog_processing.hpp	/^    std::map<ParamsContainer,int> internal_params_ids;      \/\/ url_param_id$/;"	m	class:HttpAccessLogMetrics
internal_paths	htlog_processing.hpp	/^    std::map<std::string,int> internal_paths;$/;"	m	class:HttpAccessLogMetrics
internal_paths_ids	htlog_processing.hpp	/^    std::map<std::string,int> internal_paths_ids;           \/\/ page_id$/;"	m	class:HttpAccessLogMetrics
invalid_data	GeoLite2PP_error_category.hpp	/^		invalid_data				= MMDB_INVALID_DATA_ERROR					,	\/\/\/<= 7$/;"	m	class:GeoLite2PP::MMDBStatus
invalid_lookup_path	GeoLite2PP_error_category.hpp	/^		invalid_lookup_path			= MMDB_INVALID_LOOKUP_PATH_ERROR			,	\/\/\/<= 8$/;"	m	class:GeoLite2PP::MMDBStatus
invalid_metadata	GeoLite2PP_error_category.hpp	/^		invalid_metadata			= MMDB_INVALID_METADATA_ERROR				,	\/\/\/<= 3$/;"	m	class:GeoLite2PP::MMDBStatus
invalid_node_number	GeoLite2PP_error_category.hpp	/^		invalid_node_number			= MMDB_INVALID_NODE_NUMBER_ERROR			,	\/\/\/<= 10$/;"	m	class:GeoLite2PP::MMDBStatus
io	GeoLite2PP_error_category.hpp	/^		io							= MMDB_IO_ERROR								,	\/\/\/<= 4$/;"	m	class:GeoLite2PP::MMDBStatus
ipv6_lookup_in_ipv4_db	GeoLite2PP_error_category.hpp	/^		ipv6_lookup_in_ipv4_db		= MMDB_IPV6_LOOKUP_IN_IPV4_DATABASE_ERROR		\/\/\/<= 11$/;"	m	class:GeoLite2PP::MMDBStatus
isInnerVector	htlog_containers.hpp	/^    bool isInnerVector; \/\/ internal referer to page : true, external referer to page : false$/;"	m	class:TVectorContainer
isSpider	htlog_uap.hpp	/^  bool isSpider() const { return device.family == "Spider"; }$/;"	f	struct:UserAgent
is_error_code_enum	GeoLite2PP_error_category.hpp	/^	struct is_error_code_enum<GeoLite2PP::MMDBStatus> : public true_type {};$/;"	s	namespace:GeoLite2PP::std
key	htlog_containers.hpp	/^    std::string key;$/;"	m	class:KeyValueContainer
key	htlog_containers.hpp	/^    std::string key;$/;"	m	class:ParamsContainer
lines_failed	htlog_processing.hpp	/^    int lines_failed;$/;"	m	class:HttpAccessLogMetrics
lines_processed	htlog_processing.hpp	/^    int lines_processed;$/;"	m	class:HttpAccessLogMetrics
lm	htlog_processing.hpp	/^    LogsMysql lm;$/;"	m	class:HttpAccessLogMetrics
loadSearchHostnames	htlog_processing.cpp	/^void loadSearchHostnames( std::vector<std::string> &search_engines , std::string filename){$/;"	f
lock_signal_vars	htlog_processing.cpp	/^std::vector<int> lock_signal_vars;$/;"	v
logline	htlog_processing.hpp	/^typedef struct logline {$/;"	s
logsScan	htlog_processing.cpp	/^int HttpAccessLogMetrics::logsScan( ){$/;"	f	class:HttpAccessLogMetrics
lookup	GeoLite2PP.cpp	/^std::string GeoLite2PP::DB::lookup( const std::string &ip_address )$/;"	f	class:GeoLite2PP::DB
lookup_path_does_not_match	GeoLite2PP_error_category.hpp	/^		lookup_path_does_not_match	= MMDB_LOOKUP_PATH_DOES_NOT_MATCH_DATA_ERROR,	\/\/\/<= 9$/;"	m	class:GeoLite2PP::MMDBStatus
lookup_raw	GeoLite2PP.cpp	/^MMDB_lookup_result_s GeoLite2PP::DB::lookup_raw( const std::string &ip_address )$/;"	f	class:GeoLite2PP::DB
m	htlog_processing.cpp	/^std::mutex m;$/;"	v
main	htlog_analyzer.cpp	/^int main(int argc, char** argv) {$/;"	f
major	htlog_uap.hpp	/^  std::string major;$/;"	m	struct:Agent
majorVersionReplacement	htlog_uap.hpp	/^  std::string majorVersionReplacement;$/;"	m	struct:AgentStore
make_error_code	GeoLite2PP_error_category.cpp	/^std::error_code GeoLite2PP::make_error_code( GeoLite2PP::MMDBStatus s )$/;"	f	class:GeoLite2PP
make_error_condition	GeoLite2PP_error_category.cpp	/^std::error_condition GeoLite2PP::make_error_condition( GeoLite2PP::MMDBStatus s )$/;"	f	class:GeoLite2PP
mark_placeholders	htlog_uap.cpp	/^void mark_placeholders(std::map<std::string::size_type, size_t>& replacement_map, const std::string device_property) {$/;"	f
message	GeoLite2PP_error_category.cpp	/^std::string GeoLite2PP::ErrorCategory::message( int code ) const$/;"	f	class:GeoLite2PP::ErrorCategory
minor	htlog_uap.hpp	/^  std::string minor;$/;"	m	struct:Agent
minorVersionReplacement	htlog_uap.hpp	/^  std::string minorVersionReplacement;$/;"	m	struct:AgentStore
mmdb	GeoLite2PP.hpp	/^      MMDB_s mmdb;$/;"	m	class:GeoLite2PP::final
model	htlog_uap.hpp	/^  std::string model;$/;"	m	struct:Device
modelReplacement	htlog_uap.hpp	/^  std::string modelReplacement;$/;"	m	struct:DeviceStore
modelReplacementMap	htlog_uap.hpp	/^  std::map<std::string::size_type, size_t> modelReplacementMap;$/;"	m	struct:DeviceStore
mysql_url	htlog_mysql.hpp	/^    std::string mysql_url;$/;"	m	class:LogsMysql
name	ht_nodes.h	/^  char  * name;$/;"	m	struct:name_version_node
name	ht_nodes.h	/^  char  * name;$/;"	m	struct:node
name_version_node	ht_nodes.h	/^typedef struct name_version_node {$/;"	s
name_version_node_t	ht_nodes.h	/^} name_version_node_t;$/;"	t	typeref:struct:name_version_node
node	ht_nodes.h	/^typedef struct node {$/;"	s
node	ht_nodes.h	/^} node;$/;"	t	typeref:struct:node
noexcept	GeoLite2PP_error_category.hpp	/^			virtual const char *name( void ) const noexcept;$/;"	m	class:GeoLite2PP::MMDBStatus::ErrorCategory
noexcept	GeoLite2PP_error_category.hpp	/^	const ErrorCategory &get_error_category( void ) noexcept;$/;"	m	class:GeoLite2PP::MMDBStatus
notify	htlog_processing.cpp	/^void notify( int tid ) {$/;"	f
nval	ht_nodes.h	/^  size_t nval;$/;"	m	struct:name_version_node
nval	ht_nodes.h	/^  size_t nval;$/;"	m	struct:node
operator <	htlog_containers.cpp	/^int HourlyHitsContainer::operator <( const HourlyHitsContainer & rhs ) const {$/;"	f	class:HourlyHitsContainer
operator <	htlog_containers.cpp	/^int HourlyPageviewsContainer::operator <(const HourlyPageviewsContainer & rhs) const {$/;"	f	class:HourlyPageviewsContainer
operator <	htlog_containers.cpp	/^int HourlyVisitsContainer::operator <(const HourlyVisitsContainer & rhs) const {$/;"	f	class:HourlyVisitsContainer
operator <	htlog_containers.cpp	/^int KeyValueContainer::operator <( const KeyValueContainer &rhs) const {$/;"	f	class:KeyValueContainer
operator <	htlog_containers.cpp	/^int ParamsContainer::operator <( const ParamsContainer &rhs) const{$/;"	f	class:ParamsContainer
operator <	htlog_containers.cpp	/^int TVectorContainer::operator <( const TVectorContainer & rhs ) const {$/;"	f	class:TVectorContainer
operator <<	htlog_containers.cpp	/^std::ostream &operator<<(std::ostream &os, KeyValueContainer const &m) { $/;"	f
operator ==	htlog_containers.cpp	/^int HourlyHitsContainer::operator ==( const HourlyHitsContainer & rhs ) const {$/;"	f	class:HourlyHitsContainer
operator ==	htlog_containers.cpp	/^int HourlyPageviewsContainer::operator ==(const HourlyPageviewsContainer & rhs) const {$/;"	f	class:HourlyPageviewsContainer
operator ==	htlog_containers.cpp	/^int HourlyVisitsContainer::operator ==(const HourlyVisitsContainer & rhs) const {$/;"	f	class:HourlyVisitsContainer
operator ==	htlog_containers.cpp	/^int KeyValueContainer::operator ==( const KeyValueContainer &rhs) const {$/;"	f	class:KeyValueContainer
operator ==	htlog_containers.cpp	/^int ParamsContainer::operator ==( const ParamsContainer &rhs) const{$/;"	f	class:ParamsContainer
operator ==	htlog_containers.cpp	/^int TVectorContainer::operator ==( const TVectorContainer & rhs ) const {$/;"	f	class:TVectorContainer
operator >	htlog_containers.cpp	/^int HourlyHitsContainer::operator >( const HourlyHitsContainer & rhs ) const {$/;"	f	class:HourlyHitsContainer
operator >	htlog_containers.cpp	/^int HourlyPageviewsContainer::operator >(const HourlyPageviewsContainer & rhs) const {$/;"	f	class:HourlyPageviewsContainer
operator >	htlog_containers.cpp	/^int HourlyVisitsContainer::operator >(const HourlyVisitsContainer & rhs) const {$/;"	f	class:HourlyVisitsContainer
operator >	htlog_containers.cpp	/^int KeyValueContainer::operator >( const KeyValueContainer &rhs) const {$/;"	f	class:KeyValueContainer
operator >	htlog_containers.cpp	/^int ParamsContainer::operator >( const ParamsContainer &rhs) const{$/;"	f	class:ParamsContainer
operator >	htlog_containers.cpp	/^int TVectorContainer::operator >( const TVectorContainer & rhs ) const {$/;"	f	class:TVectorContainer
os	htlog_uap.hpp	/^  Agent os;$/;"	m	struct:UserAgent
osStore	htlog_uap.hpp	/^  std::vector<AgentStore> osStore;$/;"	m	class:UAStore
out_of_memory	GeoLite2PP_error_category.hpp	/^		out_of_memory				= MMDB_OUT_OF_MEMORY_ERROR					,	\/\/\/<= 5$/;"	m	class:GeoLite2PP::MMDBStatus
page_path	htlog_containers.hpp	/^    std::string page_path;$/;"	m	class:HourlyPageviewsContainer
page_path	htlog_containers.hpp	/^    std::string page_path;$/;"	m	class:ParamsContainer
page_path_a	htlog_containers.hpp	/^    std::string page_path_a;$/;"	m	class:TVectorContainer
page_path_b	htlog_containers.hpp	/^    std::string page_path_b;$/;"	m	class:TVectorContainer
page_path_full	htlog_containers.hpp	/^    std::string page_path_full;$/;"	m	class:ParamsContainer
page_paths_full	htlog_processing.hpp	/^    std::map<std::string,int> page_paths_full;$/;"	m	class:HttpAccessLogMetrics
page_paths_full_ids	htlog_processing.hpp	/^    std::map<std::string,int> page_paths_full_ids;          \/\/ full_page_id$/;"	m	class:HttpAccessLogMetrics
page_type	htlog_containers.hpp	/^    int page_type;$/;"	m	class:ParamsContainer
pageviews	htlog_processing.hpp	/^    std::map<HourlyPageviewsContainer,int> pageviews;$/;"	m	class:HttpAccessLogMetrics
params	htlog_processing.hpp	/^  std::string params;$/;"	m	struct:url_parts
parse	htlog_uap.cpp	/^UserAgent UserAgentParser::parse(std::string ua) const {$/;"	f	class:UserAgentParser
parseLine	htlog_processing.cpp	/^int HttpAccessLogMetrics::parseLine( std::string line, parsed_logline &ll ){$/;"	f	class:HttpAccessLogMetrics
parseLogFile	htlog_processing.cpp	/^void HttpAccessLogMetrics::parseLogFile( ){$/;"	f	class:HttpAccessLogMetrics
parseParamsString	htlog_processing.cpp	/^std::vector<KeyValueContainer> HttpAccessLogMetrics::parseParamsString( std::string params_str ){$/;"	f	class:HttpAccessLogMetrics
parseParamsString	htlog_processing.cpp	/^std::vector<ParamsContainer> HttpAccessLogMetrics::parseParamsString( std::string params_str, int type, std::string hostname, std::string page_path, std::string page_path_full ){$/;"	f	class:HttpAccessLogMetrics
parse_browser_impl	htlog_uap.cpp	/^Agent parse_browser_impl(const std::string& ua, const UAStore* ua_store) {$/;"	f
parse_device_impl	htlog_uap.cpp	/^Device parse_device_impl(const std::string& ua, const UAStore* ua_store) {$/;"	f
parse_os_impl	htlog_uap.cpp	/^Agent parse_os_impl(const std::string& ua, const UAStore* ua_store) {$/;"	f
parsed_logline	htlog_processing.hpp	/^} parsed_logline;$/;"	t	typeref:struct:logline
password	htlog_mysql.hpp	/^    std::string password;$/;"	m	class:LogsMysql
patch	htlog_uap.hpp	/^  std::string patch;$/;"	m	struct:Agent
patchMinorVersionReplacement	htlog_uap.hpp	/^  std::string patchMinorVersionReplacement;$/;"	m	struct:AgentStore
patchVersionReplacement	htlog_uap.hpp	/^  std::string patchVersionReplacement;$/;"	m	struct:AgentStore
patch_minor	htlog_uap.hpp	/^  std::string patch_minor;$/;"	m	struct:Agent
path	htlog_processing.hpp	/^  std::string path;$/;"	m	struct:url_parts
per_file_threads	htlog_processing.hpp	/^    std::vector<std::thread*> per_file_threads;$/;"	m	class:HttpAccessLogMetrics
port	htlog_mysql.hpp	/^    int port;$/;"	m	class:LogsMysql
printAllIdsMaps	htlog_processing.cpp	/^void HttpAccessLogMetrics::printAllIdsMaps(){$/;"	f	class:HttpAccessLogMetrics
print_regexp_error	htlog_uap.cpp	/^void print_regexp_error( std::string re_str, std::regex_error e ){$/;"	f
processRequestUrl	htlog_processing.cpp	/^void HttpAccessLogMetrics::processRequestUrl( std::string requestPath ){$/;"	f	class:HttpAccessLogMetrics
processTrafficVectors	htlog_processing.cpp	/^void HttpAccessLogMetrics::processTrafficVectors( std::string requestPath, std::string referer ){$/;"	f	class:HttpAccessLogMetrics
processUserAgent	htlog_processing.cpp	/^void HttpAccessLogMetrics::processUserAgent( std::string uaStr ){$/;"	f	class:HttpAccessLogMetrics
protocol	htlog_processing.hpp	/^  std::string protocol;$/;"	m	struct:url_parts
re	htlog_uap.hpp	/^  boost::regex  re;$/;"	m	struct:RegexContainer
re_str	htlog_uap.hpp	/^  std::string re_str;$/;"	m	struct:RegexContainer
real_did	htlog_processing.hpp	/^    int real_did;$/;"	m	class:HttpAccessLogMetrics
referer	htlog_processing.hpp	/^  std::string  referer;$/;"	m	struct:logline
referer_domain	htlog_containers.hpp	/^    std::string referer_domain;$/;"	m	class:TVectorContainer
referer_hostnames	htlog_processing.hpp	/^    std::map<std::string,int> referer_hostnames;$/;"	m	class:HttpAccessLogMetrics
referer_hostnames_ids	htlog_processing.hpp	/^    std::map<std::string, int> referer_hostnames_ids;       \/\/ referer_domain_id$/;"	m	class:HttpAccessLogMetrics
referer_params	htlog_processing.hpp	/^    std::map<ParamsContainer,int> referer_params;$/;"	m	class:HttpAccessLogMetrics
referer_params_ids	htlog_processing.hpp	/^    std::map<ParamsContainer,int> referer_params_ids;       \/\/ url_param_id$/;"	m	class:HttpAccessLogMetrics
referer_paths	htlog_processing.hpp	/^    std::map<std::string,int> referer_paths;$/;"	m	class:HttpAccessLogMetrics
referer_paths_ids	htlog_processing.hpp	/^    std::map<std::string,int> referer_paths_ids;            \/\/ page_id$/;"	m	class:HttpAccessLogMetrics
regExpr	htlog_uap.hpp	/^  RegexContainer regExpr;$/;"	m	struct:GenericStore
regexes_file_path_	htlog_uap.hpp	/^  const std::string regexes_file_path_;$/;"	m	class:UserAgentParser
replace_all_placeholders	htlog_uap.cpp	/^void replace_all_placeholders( std::string& ua_property, const boost::smatch& result, std::map<std::string::size_type, size_t> replacement_map) {$/;"	f
replacement	htlog_uap.hpp	/^  std::string replacement;$/;"	m	struct:GenericStore
replacementMap	htlog_uap.hpp	/^  std::map<std::string::size_type, size_t> replacementMap;$/;"	m	struct:GenericStore
requestPath	htlog_processing.hpp	/^  std::string  requestPath;$/;"	m	struct:logline
requestType	htlog_processing.hpp	/^  std::string  requestType;$/;"	m	struct:logline
roundTsToHour	htlog_containers.cpp	/^time_t HourlyHitsContainer::roundTsToHour( time_t * ts_full ) {$/;"	f	class:HourlyHitsContainer
runInsertQuery	htlog_mysql.cpp	/^void LogsMysql::runInsertQuery(boost::scoped_ptr< sql::Statement > & stmt, std::string sql) {$/;"	f	class:LogsMysql
runSelectQuery	htlog_mysql.cpp	/^sql::ResultSet * LogsMysql::runSelectQuery(boost::scoped_ptr< sql::Statement > & stmt, std::string sql) {$/;"	f	class:LogsMysql
search_hostnames	htlog_processing.hpp	/^    std::vector<std::string> search_hostnames;$/;"	m	class:HttpAccessLogMetrics
search_hosts	htlog_analyzer.cpp	/^std::vector<std::string> search_hosts;$/;"	v
search_queries	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> search_queries;$/;"	m	class:HttpAccessLogMetrics
search_queries_ids	htlog_processing.hpp	/^    std::map<KeyValueContainer,int> search_queries_ids;     \/\/ search_terms_ids$/;"	m	class:HttpAccessLogMetrics
signaling_threads	htlog_processing.cpp	/^std::vector<std::thread> signaling_threads;$/;"	v
sizeBytes	htlog_processing.hpp	/^  long sizeBytes;$/;"	m	struct:logline
spawn_when_ready	htlog_processing.cpp	/^void spawn_when_ready( int tid, int tpool_size, int tmax, int &ncompleted ) {$/;"	f
st	htlog_processing.hpp	/^    int st; \/\/ start timestamp$/;"	m	class:HttpAccessLogMetrics
st_worker_thread_param	htlog_mysql.hpp	/^struct st_worker_thread_param {$/;"	s
start_thread_pool	htlog_processing.cpp	/^void start_thread_pool( int tpool_size ){$/;"	f
statusCode	htlog_processing.hpp	/^  int statusCode;$/;"	m	struct:logline
std	GeoLite2PP_error_category.hpp	/^namespace std$/;"	n	namespace:GeoLite2PP
success	GeoLite2PP_error_category.hpp	/^		success						= MMDB_SUCCESS								,	\/\/\/<= 0$/;"	m	class:GeoLite2PP::MMDBStatus
timestamp	htlog_processing.hpp	/^  time_t timestamp;$/;"	m	struct:logline
toFullString	htlog_uap.hpp	/^  std::string toFullString() const { return browser.toString() + "\/" + os.toString(); }$/;"	f	struct:UserAgent
toString	htlog_containers.cpp	/^std::string KeyValueContainer::toString() const {$/;"	f	class:KeyValueContainer
toString	htlog_containers.cpp	/^std::string ParamsContainer::toString() const{$/;"	f	class:ParamsContainer
toString	htlog_containers.cpp	/^std::string TVectorContainer::toString() const{$/;"	f	class:TVectorContainer
toString	htlog_uap.hpp	/^  std::string toString() const { return family + " " + toVersionString(); }$/;"	f	struct:Agent
toString	htlog_uap.hpp	/^  std::string toString() const { return model + " " + brand; };$/;"	f	struct:Device
toVersionString	htlog_uap.hpp	/^  std::string toVersionString() const {$/;"	f	struct:Agent
to_json	GeoLite2PP.cpp	/^std::string GeoLite2PP::DB::to_json( MMDB_entry_data_list_s *node )$/;"	f	class:GeoLite2PP::DB
trim	htlog_uap.cpp	/^void trim(std::string& str) {$/;"	f
tvectors_incoming	htlog_processing.hpp	/^    std::map<TVectorContainer,int> tvectors_incoming;$/;"	m	class:HttpAccessLogMetrics
tvectors_incoming_ids	htlog_processing.hpp	/^    std::map<TVectorContainer,int> tvectors_incoming_ids;   \/\/ tvinc_id$/;"	m	class:HttpAccessLogMetrics
tvectors_inner	htlog_processing.hpp	/^    std::map<TVectorContainer,int> tvectors_inner;$/;"	m	class:HttpAccessLogMetrics
tvectors_inner_ids	htlog_processing.hpp	/^    std::map<TVectorContainer,int> tvectors_inner_ids;      \/\/ tvin_id$/;"	m	class:HttpAccessLogMetrics
ua_store_	htlog_uap.hpp	/^  const void* ua_store_;$/;"	m	class:UserAgentParser
uid	htlog_processing.hpp	/^    int uid;$/;"	m	class:HttpAccessLogMetrics
unknown_db_format	GeoLite2PP_error_category.hpp	/^		unknown_db_format			= MMDB_UNKNOWN_DATABASE_FORMAT_ERROR		,	\/\/\/<= 6$/;"	m	class:GeoLite2PP::MMDBStatus
url_parts	htlog_processing.hpp	/^typedef struct url_parts {$/;"	s
url_parts	htlog_processing.hpp	/^} url_parts;$/;"	t	typeref:struct:url_parts
userIP	htlog_processing.hpp	/^  unsigned long  userIP;$/;"	m	struct:logline
userIPStr	htlog_processing.hpp	/^  std::string userIPStr;$/;"	m	struct:logline
username	htlog_mysql.hpp	/^    std::string username;$/;"	m	class:LogsMysql
value	htlog_containers.hpp	/^    std::string value;$/;"	m	class:KeyValueContainer
value	htlog_containers.hpp	/^    std::string value;$/;"	m	class:ParamsContainer
vectorIsInner	htlog_containers.cpp	/^bool TVectorContainer::vectorIsInner() const {$/;"	f	class:TVectorContainer
version	ht_nodes.h	/^  char  * version;$/;"	m	struct:name_version_node
visits	htlog_processing.hpp	/^    std::map<HourlyVisitsContainer,int> visits;$/;"	m	class:HttpAccessLogMetrics
worker_threads	htlog_processing.cpp	/^std::vector<std::thread> worker_threads;$/;"	v
~DB	GeoLite2PP.cpp	/^GeoLite2PP::DB::~DB( void )$/;"	f	class:GeoLite2PP::DB
~HourlyHitsContainer	htlog_containers.cpp	/^HourlyHitsContainer::~HourlyHitsContainer(){$/;"	f	class:HourlyHitsContainer
~HourlyPageviewsContainer	htlog_containers.cpp	/^HourlyPageviewsContainer::~HourlyPageviewsContainer(){$/;"	f	class:HourlyPageviewsContainer
~HourlyVisitsContainer	htlog_containers.cpp	/^HourlyVisitsContainer::~HourlyVisitsContainer(){$/;"	f	class:HourlyVisitsContainer
~HttpAccessLogMetrics	htlog_processing.cpp	/^HttpAccessLogMetrics::~HttpAccessLogMetrics(){$/;"	f	class:HttpAccessLogMetrics
~KeyValueContainer	htlog_containers.cpp	/^KeyValueContainer::~KeyValueContainer() {$/;"	f	class:KeyValueContainer
~LogsMysql	htlog_mysql.cpp	/^LogsMysql::~LogsMysql(){$/;"	f	class:LogsMysql
~ParamsContainer	htlog_containers.cpp	/^ParamsContainer::~ParamsContainer(){$/;"	f	class:ParamsContainer
~TVectorContainer	htlog_containers.cpp	/^TVectorContainer::~TVectorContainer(){$/;"	f	class:TVectorContainer
~UAStore	htlog_uap.cpp	/^UAStore::~UAStore(){$/;"	f	class:UAStore
~UserAgentParser	htlog_uap.cpp	/^UserAgentParser::~UserAgentParser() {$/;"	f	class:UserAgentParser
